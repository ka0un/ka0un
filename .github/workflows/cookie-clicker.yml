name: Cookie Clicker

on:
  issues:
    types: [opened]

jobs:
  update-leaderboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq wget

      - name: Update leaderboard
        env:
          ACTIONS_PAT: ${{ secrets.ACTIONS_PAT }}
        run: |
          LAST_USER_FILE=last_user.txt
          SCORES_FILE=scores.txt
          LEADERBOARD_FILE=README.md
          LAST_CLICKS_FILE=last.txt

          # Extract the username of the user who clicked
          USERNAME=$(jq -r '.issue.user.login' "$GITHUB_EVENT_PATH")
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

          # Check if the same user clicked twice in a row
          if [ -f "$LAST_USER_FILE" ]; then
            LAST_USER=$(cat "$LAST_USER_FILE")
          else
            LAST_USER=""
          fi

          if [ "$USERNAME" == "$LAST_USER" ]; then
            echo "User $USERNAME clicked twice in a row. Ignoring click."
            exit 0
          fi

          # Update the scores in the text file
          if grep -q "^$USERNAME:" "$SCORES_FILE"; then
            sed -i "s/^$USERNAME:.*/$USERNAME: $(($(grep "^$USERNAME:" "$SCORES_FILE" | cut -d: -f2) + 1))/" "$SCORES_FILE"
          else
            echo "$USERNAME: 1" >> "$SCORES_FILE"
          fi

          # Update the last clicks
          sed -i "/^$USERNAME/d" "$LAST_CLICKS_FILE"  # Remove any existing record for the user
          echo "$TIMESTAMP $USERNAME" >> "$LAST_CLICKS_FILE"

          # Generate leaderboard markdown table
          USERS=$(sort -t: -k2,2nr "$SCORES_FILE")
          LEADERBOARD="| Place | Pic | Name | Score |\n|-------|-------------|------|-------|\n"
          PLACE=1
          while IFS=: read -r NAME SCORE; do
            if [ "$PLACE" -le 10 ]; then
              PROFILE_PIC="https://github.com/${NAME}.png?size=40" # Example URL
              LEADERBOARD+="| $PLACE | ![$NAME]($PROFILE_PIC) | $NAME | $SCORE |\n"
              PLACE=$((PLACE + 1))
            fi
          done <<< "$USERS"

          # Generate last clicks markdown table (limit to 5 rows)
          LAST_CLICKS=$(tail -n 5 "$LAST_CLICKS_FILE" | sort -r | while read -r LINE; do
          TIMESTAMP=$(echo "$LINE" | awk '{print $1" "$2}')
          USERNAME=$(echo "$LINE" | awk '{print $3}')
          PROFILE_PIC="https://github.com/${USERNAME}.png?size=40" # Example URL
          echo "| ![$USERNAME]($PROFILE_PIC) | $USERNAME | $(date -d "$TIMESTAMP" +"%Y-%m-%d") | $(date -d "$TIMESTAMP" +"%H:%M:%S") |"
          done)

          LAST_CLICKS_TABLE="| Pic | Name | Date | Time |\n|-------------|------|------|------|\n$LAST_CLICKS"


          # Clear and update leaderboard and last clicks
          awk -v leaderboard="$LEADERBOARD" -v last_clicks_table="$LAST_CLICKS_TABLE" '
            BEGIN {
              in_leaderboard = 0;
              in_last_clicks = 0;
              has_leaderboard_end = 0;
              has_last_end = 0;
            }
            /<!-- LEADERBOARD_START -->/ {
              in_leaderboard = 1;
              print;
              next;
            }
            /<!-- LEADERBOARD_END -->/ {
              if (in_leaderboard) {
                print leaderboard;
                in_leaderboard = 0;
                has_leaderboard_end = 1;
              }
              print;
              next;
            }
            /<!-- LAST_START -->/ {
              in_last_clicks = 1;
              print;
              next;
            }
            /<!-- LAST_END -->/ {
              if (in_last_clicks) {
                print last_clicks_table;
                in_last_clicks = 0;
                has_last_end = 1;
              }
              print;
              next;
            }
            !in_leaderboard && !in_last_clicks { print }
            END {
              if (has_leaderboard_end == 0) {
                print "<!-- LEADERBOARD_END -->";
              }
              if (has_last_end == 0) {
                print "<!-- LAST_END -->";
              }
            }
          ' "$LEADERBOARD_FILE" > temp.md && mv temp.md "$LEADERBOARD_FILE"

          # Update last user in the file
          echo "$USERNAME" > "$LAST_USER_FILE"

          # Close all opened issues
          OPEN_ISSUES=$(curl -s -H "Authorization: token $ACTIONS_PAT" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open" \
            | jq -r '.[].number')

          for ISSUE in $OPEN_ISSUES; do
            echo "Closing issue #$ISSUE"
            curl -s -X PATCH -H "Authorization: token $ACTIONS_PAT" \
              -d '{"state":"closed"}' \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE"
          done

          # Commit the changes
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$SCORES_FILE" "$LEADERBOARD_FILE" "$LAST_USER_FILE" "$LAST_CLICKS_FILE"
          git commit -m "Update leaderboard and last clicks for $USERNAME"

          # Push changes
          echo "Using PAT for git push"
          git push https://${{ secrets.ACTIONS_PAT }}@github.com/${{ github.repository }}.git HEAD:main

